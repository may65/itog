import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import django
from django.db import DatabaseError

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower.settings')
django.setup()

from flower.models import Product, Order, OrderItem
from django.contrib.auth.models import User
from dotenv import load_dotenv

load_dotenv()
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å ORM --------------------------------------------------------
def sync_orm_operations():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å ORM"""
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    product = Product.objects.get(id=1)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    user = User.objects.get(username='admin')
    order = Order.objects.create(
        user=user,
        delivery_address="—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 1",
        customer_phone="+79991234567"
    )
    OrderItem.objects.create(order=order, product=product, quantity=2)


async def async_orm_operations():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å ORM (–¥–ª—è aiogram 3.x+)"""
    from django.db import close_old_connections

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö ORM-–æ–ø–µ—Ä–∞—Ü–∏–π
        from asgiref.sync import sync_to_async

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        product = await sync_to_async(Product.objects.get)(id=1)

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await sync_to_async(User.objects.get_or_create)(
            username='tg_user',
            defaults={'email': 'tg@example.com'}
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = await sync_to_async(Order.objects.create)(
            user=user,
            delivery_address="—É–ª. –¢–µ–ª–µ–≥—Ä–∞–º–Ω–∞—è, 5",
            customer_phone="+79997654321"
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        await sync_to_async(OrderItem.objects.create)(
            order=order,
            product=product,
            quantity=1
        )

    except DatabaseError as e:
        print(f"Database error: {e}")
    finally:
        await sync_to_async(close_old_connections)()


# -----------------------------------------------------------------------------

async def send_order_notification(order: Order):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    message = (
        f"üõé –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.username}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
        f"üïí –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_time}"
    )
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)


@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer(
        "üå∏ –ë–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/products - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "/order <–∞–¥—Ä–µ—Å>;<—Ç–µ–ª–µ—Ñ–æ–Ω>;<ID —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é> - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"
    )


@dp.message(Command('products'))
async def list_products(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    from asgiref.sync import sync_to_async

    async def get_products():
        return await sync_to_async(list)(Product.objects.all())

    products = await get_products()
    response = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join(
        [f"{p.id}. {p.name} - {p.price}‚ÇΩ" for p in products]
    )
    await message.answer(response)


@dp.message(Command('order'))
async def create_order(message: types.Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram"""
    from asgiref.sync import sync_to_async

    try:
        _, data = message.text.split(maxsplit=1)
        address, phone, product_ids = data.split(';')
        product_ids = [int(pid.strip()) for pid in product_ids.split(',')]

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await sync_to_async(User.objects.get_or_create)(
            username=f'tg_{message.from_user.id}',
            defaults={'email': f'tg_{message.from_user.id}@example.com'}
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order = await sync_to_async(Order.objects.create)(
            user=user,
            delivery_address=address.strip(),
            customer_phone=phone.strip()
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        for pid in product_ids:
            product = await sync_to_async(Product.objects.get)(id=pid)
            await sync_to_async(OrderItem.objects.create)(
                order=order,
                product=product,
                quantity=1
            )

        await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —Å–æ–∑–¥–∞–Ω!")
        await send_order_notification(order)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())